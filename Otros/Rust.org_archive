#    -*- mode: org -*-


Archived entries from file /run/media/alejandro/Dark System/Proyectos de Programacion/Grupo de tareas/Rust.org


* Ownership
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-03 Tue 08:29
:ARCHIVE_FILE: /run/media/alejandro/Dark System/Proyectos de Programacion/Grupo de tareas/Rust.org
:ARCHIVE_OLPATH: Conceptos basicos
:ARCHIVE_CATEGORY: Rust
:END:
  - Reglas
    - Cada valor en Rust tiene una variable llamada duenio
    - Solo puede haber un duenio a la vez
    - Cuando el duenio se sale del scope el valor se elimina    
    
      
  - Las cadenas de caracteres dinamicas no se copian directamente:
    let s1 = String::from("Hello!");     // Aqui se libera la variable s1, ya que la copia de una
    let s2 = s1;                         // cadena a otra daria un error el eliminar los datos  
				         // de la primera 
  
    let s1 = String::from("Hello!");     // No se puede copiar el valor del string pero si se puede
    let s2 = s1.clone();                 // clonar y no perder los datos del primero 


  - Las copias de tipos como enteros no nesecitan ser clonados porque su longitud es fija en la
    pila de memoria. Los diferentes tipos que no necesitan copias son:
    
    - Todos los tipos de enteros como u32 
    - Los booleanos true y false
    - los char    
    - Los flotantes f32 y f64 
    - Tuplas que contengan que se puedan copiar ej:
      - (i32,i32)     si
      - (i32, String) no



  - Ejemplos de Ownership en funciones
      fn main() {
          let s = String::from("hello"); // s comes into scope
          takes_ownership(s);            // s's value moves into the function...
                                         // ... and so is no longer valid here
          let x = 5;                     // x comes into scope
          makes_copy(x);                 // x would move into the function,
                                         // but i32 is Copy, so it's okay to
                                         // still use x afterward
      }                                  // Here, x goes out of scope, then s. But because s's value was moved,
                                         // nothing special happens.
      fn takes_ownership(some_string: String){ // some_string comes into scope
          println!("{}", some_string);
      }                                  // Here, some_string goes out of scope and `drop` is called. The backing
                                         // memory is freed.
      fn makes_copy(some_integer: i32) { // some_integer comes into scope
          println!("{}", some_integer);
      }                                  // Here, some_integer goes out of scope. Nothing special happens.

      


  - Ejemplos de Ownership en funciones con valores de retorno
      fn main() {
          let s1 = gives_ownership();           // gives_ownership moves its return value into s1
          let s2 = String::from("hello");       // s2 comes into scope
          let s3 = takes_and_gives_back(s2);    // s2 is moved into
                                                // takes_and_gives_back, which also
                                                // moves its return value into s3
      }                                         // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
                                                // moved, so nothing happens. s1 goes out of scope and is dropped.

      fn gives_ownership() -> String {          // gives_ownership will move its
                                                // return value into the function
                                                // that calls it
          let some_string = String::from("hello"); // some_string comes into scope
          some_string                           // some_string is returned and
                                                // moves out to the calling function
      }                                         // takes_and_gives_back will take a String and return one
      
      fn takes_and_gives_back(a_string: String) -> String {    // a_string comes into
                                                // scope
           a_string                             // a_string is returned and moves out to the calling function
      }

  - Refencias y Prestamos(Borrowing)
   - ejemplo 1 
    fn main() {
        let s1 = String::from("hello");
        let len = calculate_length(&s1);
        println!("The length of '{}' is {}.", s1, len);
    }
    
    fn calculate_length(s: &String) -> usize {   // s is a reference to a String
        s.len()
    } // Here, s goes out of scope. But because it does not have ownership of
      // what it refers to, nothing happens.

  - Las variables inmutables no se cambian cuando se pasan por referencias
  - ejemplo 2
    fn main() {
        let s = String::from("hello");
        change(&s);
    }

    fn change(some_string: &String) {
       some_string.push_str(", world"); // This code qill throw an error
    }
    
